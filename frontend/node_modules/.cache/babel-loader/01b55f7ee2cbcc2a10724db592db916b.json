{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mfsas\\\\OneDrive\\\\Documents\\\\DevCo\\\\dev-co\\\\group_32\\\\frontend\\\\src\\\\Components\\\\ContractPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './Other/Header';\nimport Contracts from './Other/Contracts';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Menu from './Other/Menu';\nimport ApplicantsTable from './ApplicantsTable';\nimport CompanyContractTable from './CompanyContracts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ContractPage() {\n  _s();\n\n  const [showAddContract, setShowAddContract] = useState(false);\n  const [contracts, setContracts] = useState([]);\n  const [showAllContracts, setShowAllContracts] = useState(true);\n  const [showOpenContracts, setShowOpenContracts] = useState(false);\n  const [showClosedContracts, setShowClosedContracts] = useState(false); // extra constant needed\n\n  const [data, setData] = useState();\n  useEffect(() => {\n    const getContracts = async () => {\n      const contractsFromServer = await fetchContracts();\n      setContracts(contractsFromServer);\n    };\n\n    getContracts();\n  }, []); //Fetch Contracts\n\n  const fetchContracts = async () => {\n    const res = await fetch('http://127.0.0.1:5000/getCompanyContracts', {\n      'method': 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const datas = await res.json();\n    return datas;\n  };\n\n  const fetchContract = async id => {\n    // FIXME: What id is this???\n    // const res = await fetch(`http://localhost:5000/contracts/${id}`)\n    // const data = await res.json()\n    const res = await fetch(`http://127.0.0.1:5000/getContract${id}`, {\n      'method': 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const datas = await res.json();\n    return datas;\n  }; //Add Contract\n  // Delete Contract\n\n\n  const deleteContract = async id => {\n    await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'DELETE'\n    });\n    setContracts(contracts.filter(contract => contract.id !== id));\n  }; // Expand Contract\n\n\n  const expandContract = async id => {\n    const contractToExpand = await fetchContract(id);\n    const updContract = { ...contractToExpand,\n      expandContract: !contractToExpand.expandContract\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      expandContract: data.expandContract\n    } : contract));\n  };\n\n  const showDevelopers = async id => {\n    const devsToShow = await fetchContract(id);\n    const showDev = { ...devsToShow,\n      showDevs: !devsToShow.showDevs\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(showDev)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      showDevs: data.showDevs\n    } : contract));\n  }; // Toggle Reminder\n\n\n  const toggleExpand = async id => {\n    const contractToToggle = await fetchContract(id);\n    const updContract = { ...contractToToggle,\n      expandContract: !contractToToggle.expandContract\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      expandContract: data.expandContract\n    } : contract));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddContract(!showAddContract),\n        showAdd: showAddContract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), showAddContract && /*#__PURE__*/_jsxDEV(AddContract, {\n        onAdd: addContract,\n        showAdd: () => setShowAddContract(!showAddContract)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 29\n      }, this), !showAddContract ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContractPage, \"79zee7FdyuuHACJFrhjd15SW8gI=\");\n\n_c = ContractPage;\nexport default ContractPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractPage\");","map":{"version":3,"sources":["C:/Users/mfsas/OneDrive/Documents/DevCo/dev-co/group_32/frontend/src/Components/ContractPage.js"],"names":["useState","useEffect","Header","Contracts","BrowserRouter","Router","Route","Menu","ApplicantsTable","CompanyContractTable","ContractPage","showAddContract","setShowAddContract","contracts","setContracts","showAllContracts","setShowAllContracts","showOpenContracts","setShowOpenContracts","showClosedContracts","setShowClosedContracts","data","setData","getContracts","contractsFromServer","fetchContracts","res","fetch","headers","datas","json","fetchContract","id","deleteContract","method","filter","contract","expandContract","contractToExpand","updContract","body","JSON","stringify","map","showDevelopers","devsToShow","showDev","showDevs","toggleExpand","contractToToggle","addContract"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Header from './Other/Header'\r\nimport Contracts from './Other/Contracts'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Menu from './Other/Menu'\r\nimport ApplicantsTable from './ApplicantsTable'\r\nimport CompanyContractTable from './CompanyContracts'\r\n\r\n\r\nfunction ContractPage() {\r\n  const [showAddContract, setShowAddContract] = useState(false)\r\n  const [contracts, setContracts] = useState([])\r\n  const [showAllContracts, setShowAllContracts] = useState(true)\r\n  const [showOpenContracts, setShowOpenContracts] = useState(false)\r\n  const [showClosedContracts, setShowClosedContracts] = useState(false)\r\n\r\n  // extra constant needed\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const getContracts = async () => {\r\n      const contractsFromServer = await fetchContracts()\r\n      setContracts(contractsFromServer)\r\n    }\r\n\r\n    getContracts()\r\n  }, [])\r\n\r\n  //Fetch Contracts\r\n  const fetchContracts = async () => {\r\n\r\n    const res = await fetch('http://127.0.0.1:5000/getCompanyContracts', {\r\n    'method':'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    const datas = await res.json();\r\n\r\n    return datas\r\n  }\r\n\r\n  const fetchContract = async (id) => { // FIXME: What id is this???\r\n\r\n    // const res = await fetch(`http://localhost:5000/contracts/${id}`)\r\n    // const data = await res.json()\r\n\r\n\r\n    const res = await fetch(`http://127.0.0.1:5000/getContract${id}`, {\r\n    'method':'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    const datas = await res.json();\r\n\r\n    return datas\r\n  }\r\n\r\n  //Add Contract\r\n  \r\n\r\n\r\n  // Delete Contract\r\n  const deleteContract = async (id) => {\r\n    await fetch(`http://localhost:5000/contracts/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n    setContracts(contracts.filter((contract) => contract.id !== id))\r\n  }\r\n\r\n  // Expand Contract\r\n  const expandContract = async (id) => {\r\n    const contractToExpand = await fetchContract(id)\r\n    const updContract = {\r\n      ...contractToExpand,\r\n      expandContract: !contractToExpand.expandContract\r\n    }\r\n\r\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(updContract)\r\n    })\r\n\r\n    const data = await res.json()\r\n\r\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, expandContract: data.expandContract } : contract))\r\n  }\r\n\r\n  const showDevelopers = async (id) => {\r\n    const devsToShow = await fetchContract(id)\r\n    const showDev = {\r\n      ...devsToShow,\r\n      showDevs: !devsToShow.showDevs\r\n    }\r\n\r\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(showDev)\r\n    })\r\n\r\n    const data = await res.json()\r\n\r\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, showDevs: data.showDevs } : contract))\r\n  }\r\n\r\n  // Toggle Reminder\r\n  const toggleExpand = async (id) => {\r\n    const contractToToggle = await fetchContract(id)\r\n    const updContract = {\r\n      ...contractToToggle,\r\n      expandContract: !contractToToggle.expandContract\r\n    }\r\n\r\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(updContract)\r\n    })\r\n\r\n    const data = await res.json()\r\n\r\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, expandContract: data.expandContract } : contract))\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"container\">\r\n        <Header\r\n          onAdd={() => setShowAddContract(!showAddContract)}\r\n          showAdd={showAddContract}\r\n        />\r\n        {showAddContract && <AddContract onAdd=\r\n          {addContract} showAdd={() => setShowAddContract(!showAddContract)}/>}\r\n        {!showAddContract ? (\r\n          <>\r\n            \r\n          </>\r\n        ):(<></>)}\r\n        \r\n      </div>\r\n      \r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default ContractPage;\r\n"]},"metadata":{},"sourceType":"module"}