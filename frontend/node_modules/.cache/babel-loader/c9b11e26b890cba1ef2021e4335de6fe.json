{"ast":null,"code":"var _jsxFileName = \"/home/chris/data/cs334/group_32/frontend/src/Components/ContractPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './Other/Header';\nimport Contracts from './Other/Contracts';\nimport AddContract from './Other/AddContract';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Menu from './Other/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ContractPage() {\n  _s();\n\n  const [showAddContract, setShowAddContract] = useState(false);\n  const [contracts, setContracts] = useState([]);\n  const [showAllContracts, setShowAllContracts] = useState(true);\n  const [showOpenContracts, setShowOpenContracts] = useState(false);\n  const [showClosedContracts, setShowClosedContracts] = useState(false);\n  useEffect(() => {\n    const getContracts = async () => {\n      const contractsFromServer = await fetchContracts();\n      setContracts(contractsFromServer);\n    };\n\n    getContracts();\n  }, []); //Fetch Contracts\n\n  const fetchContracts = async () => {\n    const res = await fetch('http://localhost:5000/contracts');\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchContract = async id => {\n    const res = await fetch(`http://localhost:5000/contracts/${id}`);\n    const data = await res.json();\n    return data;\n  }; //Add Contract\n\n\n  const addContract = async contract => {\n    // const res = await fetch('http://localhost:5000/contracts', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-type': 'application/json'\n    //   },\n    //   body: JSON.stringify(contract),\n    // })\n    // const data = await res.json()\n    // setContracts([...contracts, data])\n    const requestOpt = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'contract_name': contract.contractName,\n        'contract_length': contract.contractLength,\n        'contract_value': contract.contractValue,\n        'contract_description': contract.contractDes,\n        'programming_language': contract.contractLan,\n        'location': contract.location\n      })\n    };\n\n    async function fetchFunc() {\n      return await fetch('http://127.0.0.1:5000/createContract', requestOpt).then(response => response.json()).catch(error => console.log(error));\n    }\n\n    (async () => {\n      let info = await fetchFunc();\n    })();\n  }; // Delete Contract\n\n\n  const deleteContract = async id => {\n    await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'DELETE'\n    });\n    setContracts(contracts.filter(contract => contract.id !== id));\n  }; // Expand Contract\n\n\n  const expandContract = async id => {\n    const contractToExpand = await fetchContract(id);\n    const updContract = { ...contractToExpand,\n      expandContract: !contractToExpand.expandContract\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      expandContract: data.expandContract\n    } : contract));\n  };\n\n  const showDevelopers = async id => {\n    const devsToShow = await fetchContract(id);\n    const showDev = { ...devsToShow,\n      showDevs: !devsToShow.showDevs\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(showDev)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      showDevs: data.showDevs\n    } : contract));\n  }; // Toggle Reminder\n\n\n  const toggleExpand = async id => {\n    const contractToToggle = await fetchContract(id);\n    const updContract = { ...contractToToggle,\n      expandContract: !contractToToggle.expandContract\n    };\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    });\n    const data = await res.json();\n    setContracts(contracts.map(contract => contract.id === id ? { ...contract,\n      expandContract: data.expandContract\n    } : contract));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddContract(!showAddContract),\n        showAdd: showAddContract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), showAddContract && /*#__PURE__*/_jsxDEV(AddContract, {\n        onAdd: addContract,\n        showAdd: () => setShowAddContract(!showAddContract)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }, this), !showAddContract ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Listed Contracts\", ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {\n          all: () => {\n            setShowAllContracts(true);\n            setShowOpenContracts(false);\n            setShowClosedContracts(false);\n          },\n          open: () => {\n            setShowAllContracts(false);\n            setShowOpenContracts(true);\n            setShowClosedContracts(false);\n          },\n          closed: () => {\n            setShowAllContracts(false);\n            setShowOpenContracts(false);\n            setShowClosedContracts(true);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 43\n        }, this), contracts.length > 0 ? /*#__PURE__*/_jsxDEV(Contracts, {\n          contracts: contracts,\n          onExpand: expandContract,\n          all: showAllContracts,\n          open: showOpenContracts,\n          closed: showClosedContracts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 34\n        }, this) : 'No Contracts to Show']\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContractPage, \"0kGBBsVfYPZ9ea8i+1jh0+M3Guo=\");\n\n_c = ContractPage;\nexport default ContractPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractPage\");","map":{"version":3,"sources":["/home/chris/data/cs334/group_32/frontend/src/Components/ContractPage.js"],"names":["useState","useEffect","Header","Contracts","AddContract","BrowserRouter","Router","Route","Menu","ContractPage","showAddContract","setShowAddContract","contracts","setContracts","showAllContracts","setShowAllContracts","showOpenContracts","setShowOpenContracts","showClosedContracts","setShowClosedContracts","getContracts","contractsFromServer","fetchContracts","res","fetch","data","json","fetchContract","id","addContract","contract","requestOpt","method","headers","body","JSON","stringify","contractName","contractLength","contractValue","contractDes","contractLan","location","fetchFunc","then","response","catch","error","console","log","info","deleteContract","filter","expandContract","contractToExpand","updContract","map","showDevelopers","devsToShow","showDev","showDevs","toggleExpand","contractToToggle","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from './Other/Header'\nimport Contracts from './Other/Contracts'\nimport AddContract from './Other/AddContract'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Menu from './Other/Menu'\n\n\nfunction ContractPage() {\n  const [showAddContract, setShowAddContract] = useState(false)\n  const [contracts, setContracts] = useState([])\n  const [showAllContracts, setShowAllContracts] = useState(true)\n  const [showOpenContracts, setShowOpenContracts] = useState(false)\n  const [showClosedContracts, setShowClosedContracts] = useState(false)\n\n  useEffect(() => {\n    const getContracts = async () => {\n      const contractsFromServer = await fetchContracts()\n      setContracts(contractsFromServer)\n    }\n\n    getContracts()\n  }, [])\n\n  //Fetch Contracts\n  const fetchContracts = async () => {\n    const res = await fetch('http://localhost:5000/contracts')\n    const data = await res.json()\n\n    return data\n  }\n\n  const fetchContract = async (id) => {\n    const res = await fetch(`http://localhost:5000/contracts/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  //Add Contract\n  const addContract = async (contract) => {\n    // const res = await fetch('http://localhost:5000/contracts', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-type': 'application/json'\n    //   },\n    //   body: JSON.stringify(contract),\n    // })\n\n    // const data = await res.json()\n\n    // setContracts([...contracts, data])\n    const requestOpt = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n          'contract_name':contract.contractName,\n          'contract_length':contract.contractLength,\n          'contract_value':contract.contractValue,\n          'contract_description':contract.contractDes,\n          'programming_language':contract.contractLan,\n          'location':contract.location\n      }),\n    }\n    async function fetchFunc() {\n        return await fetch('http://127.0.0.1:5000/createContract', requestOpt)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n    }\n    (async () => {\n        let info = await fetchFunc();\n    })()\n\n  }\n\n  // Delete Contract\n  const deleteContract = async (id) => {\n    await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'DELETE',\n    })\n    setContracts(contracts.filter((contract) => contract.id !== id))\n  }\n\n  // Expand Contract\n  const expandContract = async (id) => {\n    const contractToExpand = await fetchContract(id)\n    const updContract = {\n      ...contractToExpand,\n      expandContract: !contractToExpand.expandContract\n    }\n\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    })\n\n    const data = await res.json()\n\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, expandContract: data.expandContract } : contract))\n  }\n\n  const showDevelopers = async (id) => {\n    const devsToShow = await fetchContract(id)\n    const showDev = {\n      ...devsToShow,\n      showDevs: !devsToShow.showDevs\n    }\n\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(showDev)\n    })\n\n    const data = await res.json()\n\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, showDevs: data.showDevs } : contract))\n  }\n\n  // Toggle Reminder\n  const toggleExpand = async (id) => {\n    const contractToToggle = await fetchContract(id)\n    const updContract = {\n      ...contractToToggle,\n      expandContract: !contractToToggle.expandContract\n    }\n\n    const res = await fetch(`http://localhost:5000/contracts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updContract)\n    })\n\n    const data = await res.json()\n\n    setContracts(contracts.map((contract) => contract.id === id ? { ...contract, expandContract: data.expandContract } : contract))\n  }\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header\n          onAdd={() => setShowAddContract(!showAddContract)}\n          showAdd={showAddContract}\n        />\n        {showAddContract && <AddContract onAdd=\n          {addContract} showAdd={() => setShowAddContract(!showAddContract)}/>}\n        {!showAddContract ? (\n          <><h2>Listed Contracts{' '}</h2><Menu\n            all={() => { setShowAllContracts(true); setShowOpenContracts(false); setShowClosedContracts(false) } }\n            open={() => { setShowAllContracts(false); setShowOpenContracts(true); setShowClosedContracts(false) } }\n            closed={() => { setShowAllContracts(false); setShowOpenContracts(false); setShowClosedContracts(true) } }\n          >\n          </Menu>\n        {contracts.length > 0 ? (<Contracts contracts={contracts} onExpand={expandContract} all={showAllContracts} open={showOpenContracts} closed={showClosedContracts}\n        />) : ('No Contracts to Show')}</>\n        ) : (\n          <p></p>\n        )}\n        \n      </div>\n      \n    </Router>\n  )\n}\n\nexport default ContractPage;"]},"metadata":{},"sourceType":"module"}